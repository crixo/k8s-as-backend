// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    //using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// PodList is a list of Pods.
    /// </summary>
    public partial class TodoList
    {
        /// <summary>
        /// Gets or sets aPIVersion defines the versioned schema of this
        /// representation of an object. Servers should convert recognized
        /// schemas to the latest internal value, and may reject unrecognized
        /// values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or sets list of pods. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<Todo> Items { get; set; }

        /// <summary>
        /// Gets or sets kind is a string value representing the REST resource
        /// this object represents. Servers may infer this from the endpoint
        /// the client submits requests to. Cannot be updated. In CamelCase.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets standard list metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public V1ListMeta Metadata { get; set; }
    }
}

namespace k8s.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Pod is a collection of containers that can run on a host. This resource
    /// is created by clients and scheduled onto hosts.
    /// </summary>
    public class Todo
    {
        /// <summary>
        /// Gets or sets aPIVersion defines the versioned schema of this
        /// representation of an object. Servers should convert recognized
        /// schemas to the latest internal value, and may reject unrecognized
        /// values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or sets kind is a string value representing the REST resource
        /// this object represents. Servers may infer this from the endpoint
        /// the client submits requests to. Cannot be updated. In CamelCase.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets standard object's metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public V1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Gets or sets specification of the desired behavior of the pod. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        /// </summary>
        [JsonProperty(PropertyName = "spec")]
        public TodoSpec Spec { get; set; }
    }
}

namespace k8s.Models
{

    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// PodSpec is a description of a pod.
    /// </summary>
    public class TodoSpec
    {
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

      [JsonProperty(PropertyName = "when")]
      public System.DateTime? When { get; set; }        

    }
}


namespace k8s.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// ListMeta describes metadata that synthetic resources must have,
    /// including lists and various status objects. A resource may have only
    /// one of {ObjectMeta, ListMeta}.
    /// </summary>
    public partial class V1ListMeta
    {
        /// <summary>
        /// Gets or sets continue may be set if the user set a limit on the
        /// number of items returned, and indicates that the server has more
        /// data available. The value is opaque and may be used to issue
        /// another request to the endpoint that served this list to retrieve
        /// the next set of available objects. Continuing a consistent list may
        /// not be possible if the server configuration has changed or more
        /// than a few minutes have passed. The resourceVersion field returned
        /// when using this continue value will be identical to the value in
        /// the first response, unless you have received this token from an
        /// error message.
        /// </summary>
        [JsonProperty(PropertyName = "continue")]
        public string ContinueProperty { get; set; }

        /// <summary>
        /// Gets or sets remainingItemCount is the number of subsequent items
        /// in the list which are not included in this list response. If the
        /// list request contained label or field selectors, then the number of
        /// remaining items is unknown and the field will be left unset and
        /// omitted during serialization. If the list is complete (either
        /// because it is not chunking or because this is the last chunk), then
        /// there are no more remaining items and this field will be left unset
        /// and omitted during serialization. Servers older than v1.15 do not
        /// set this field. The intended use of the remainingItemCount is
        /// *estimating* the size of a collection. Clients should not rely on
        /// the remainingItemCount to be set or to be exact.
        /// </summary>
        [JsonProperty(PropertyName = "remainingItemCount")]
        public long? RemainingItemCount { get; set; }

        /// <summary>
        /// Gets or sets string that identifies the server's internal version
        /// of this object that can be used by clients to determine when
        /// objects have changed. Value must be treated as opaque by clients
        /// and passed unmodified back to the server. Populated by the system.
        /// Read-only. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        /// </summary>
        [JsonProperty(PropertyName = "resourceVersion")]
        public string ResourceVersion { get; set; }

        /// <summary>
        /// Gets or sets selfLink is a URL representing this object. Populated
        /// by the system. Read-only.
        ///
        /// DEPRECATED Kubernetes will stop propagating this field in 1.20
        /// release and the field is planned to be removed in 1.21 release.
        /// </summary>
        [JsonProperty(PropertyName = "selfLink")]
        public string SelfLink { get; set; }

    }
}

namespace k8s.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ObjectMeta is metadata that all persisted resources must have, which
    /// includes all objects users must create.
    /// </summary>
    public partial class V1ObjectMeta
    {
        /// <summary>
        /// Gets or sets annotations is an unstructured key value map stored
        /// with a resource that may be set by external tools to store and
        /// retrieve arbitrary metadata. They are not queryable and should be
        /// preserved when modifying objects. More info:
        /// http://kubernetes.io/docs/user-guide/annotations
        /// </summary>
        [JsonProperty(PropertyName = "annotations")]
        public IDictionary<string, string> Annotations { get; set; }

        /// <summary>
        /// Gets or sets the name of the cluster which the object belongs to.
        /// This is used to distinguish resources with same name and namespace
        /// in different clusters. This field is not set anywhere right now and
        /// apiserver is going to ignore it if set in create or update request.
        /// </summary>
        [JsonProperty(PropertyName = "clusterName")]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or sets creationTimestamp is a timestamp representing the
        /// server time when this object was created. It is not guaranteed to
        /// be set in happens-before order across separate operations. Clients
        /// may not set this value. It is represented in RFC3339 form and is in
        /// UTC.
        ///
        /// Populated by the system. Read-only. Null for lists. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonProperty(PropertyName = "creationTimestamp")]
        public System.DateTime? CreationTimestamp { get; set; }

        /// <summary>
        /// Gets or sets number of seconds allowed for this object to
        /// gracefully terminate before it will be removed from the system.
        /// Only set when deletionTimestamp is also set. May only be shortened.
        /// Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "deletionGracePeriodSeconds")]
        public long? DeletionGracePeriodSeconds { get; set; }

        /// <summary>
        /// Gets or sets deletionTimestamp is RFC 3339 date and time at which
        /// this resource will be deleted. This field is set by the server when
        /// a graceful deletion is requested by the user, and is not directly
        /// settable by a client. The resource is expected to be deleted (no
        /// longer visible from resource lists, and not reachable by name)
        /// after the time in this field, once the finalizers list is empty. As
        /// long as the finalizers list contains items, deletion is blocked.
        /// Once the deletionTimestamp is set, this value may not be unset or
        /// be set further into the future, although it may be shortened or the
        /// resource may be deleted prior to this time. For example, a user may
        /// request that a pod is deleted in 30 seconds. The Kubelet will react
        /// by sending a graceful termination signal to the containers in the
        /// pod. After that 30 seconds, the Kubelet will send a hard
        /// termination signal (SIGKILL) to the container and after cleanup,
        /// remove the pod from the API. In the presence of network partitions,
        /// this object may still exist after this timestamp, until an
        /// administrator or automated process can determine the resource is
        /// fully terminated. If not set, graceful deletion of the object has
        /// not been requested.
        ///
        /// Populated by the system when a graceful deletion is requested.
        /// Read-only. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonProperty(PropertyName = "deletionTimestamp")]
        public System.DateTime? DeletionTimestamp { get; set; }

        /// <summary>
        /// Gets or sets must be empty before the object is deleted from the
        /// registry. Each entry is an identifier for the responsible component
        /// that will remove the entry from the list. If the deletionTimestamp
        /// of the object is non-nil, entries in this list can only be removed.
        /// </summary>
        [JsonProperty(PropertyName = "finalizers")]
        public IList<string> Finalizers { get; set; }

        /// <summary>
        /// Gets or sets generateName is an optional prefix, used by the
        /// server, to generate a unique name ONLY IF the Name field has not
        /// been provided. If this field is used, the name returned to the
        /// client will be different than the name passed. This value will also
        /// be combined with a unique suffix. The provided value has the same
        /// validation rules as the Name field, and may be truncated by the
        /// length of the suffix required to make the value unique on the
        /// server.
        ///
        /// If this field is specified and the generated name exists, the
        /// server will NOT return a 409 - instead, it will either return 201
        /// Created or 500 with Reason ServerTimeout indicating a unique name
        /// could not be found in the time allotted, and the client should
        /// retry (optionally after the time indicated in the Retry-After
        /// header).
        ///
        /// Applied only if Name is not specified. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        /// </summary>
        [JsonProperty(PropertyName = "generateName")]
        public string GenerateName { get; set; }

        /// <summary>
        /// Gets or sets a sequence number representing a specific generation
        /// of the desired state. Populated by the system. Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "generation")]
        public long? Generation { get; set; }

        /// <summary>
        /// Gets or sets map of string keys and values that can be used to
        /// organize and categorize (scope and select) objects. May match
        /// selectors of replication controllers and services. More info:
        /// http://kubernetes.io/docs/user-guide/labels
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IDictionary<string, string> Labels { get; set; }

        // /// <summary>
        // /// Gets or sets managedFields maps workflow-id and version to the set
        // /// of fields that are managed by that workflow. This is mostly for
        // /// internal housekeeping, and users typically shouldn't need to set or
        // /// understand this field. A workflow can be the user's name, a
        // /// controller's name, or the name of a specific apply path like
        // /// "ci-cd". The set of fields is always in the version that the
        // /// workflow used when modifying the object.
        // /// </summary>
        // [JsonProperty(PropertyName = "managedFields")]
        // public IList<V1ManagedFieldsEntry> ManagedFields { get; set; }

        /// <summary>
        /// Gets or sets name must be unique within a namespace. Is required
        /// when creating resources, although some resources may allow a client
        /// to request the generation of an appropriate name automatically.
        /// Name is primarily intended for creation idempotence and
        /// configuration definition. Cannot be updated. More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets namespace defines the space within each name must be
        /// unique. An empty namespace is equivalent to the "default"
        /// namespace, but "default" is the canonical representation. Not all
        /// objects are required to be scoped to a namespace - the value of
        /// this field for those objects will be empty.
        ///
        /// Must be a DNS_LABEL. Cannot be updated. More info:
        /// http://kubernetes.io/docs/user-guide/namespaces
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        // /// <summary>
        // /// Gets or sets list of objects depended by this object. If ALL
        // /// objects in the list have been deleted, this object will be garbage
        // /// collected. If this object is managed by a controller, then an entry
        // /// in this list will point to this controller, with the controller
        // /// field set to true. There cannot be more than one managing
        // /// controller.
        // /// </summary>
        // [JsonProperty(PropertyName = "ownerReferences")]
        // public IList<V1OwnerReference> OwnerReferences { get; set; }

        /// <summary>
        /// Gets or sets an opaque value that represents the internal version
        /// of this object that can be used by clients to determine when
        /// objects have changed. May be used for optimistic concurrency,
        /// change detection, and the watch operation on a resource or set of
        /// resources. Clients must treat these values as opaque and passed
        /// unmodified back to the server. They may only be valid for a
        /// particular resource or set of resources.
        ///
        /// Populated by the system. Read-only. Value must be treated as opaque
        /// by clients and . More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        /// </summary>
        [JsonProperty(PropertyName = "resourceVersion")]
        public string ResourceVersion { get; set; }

        /// <summary>
        /// Gets or sets selfLink is a URL representing this object. Populated
        /// by the system. Read-only.
        ///
        /// DEPRECATED Kubernetes will stop propagating this field in 1.20
        /// release and the field is planned to be removed in 1.21 release.
        /// </summary>
        [JsonProperty(PropertyName = "selfLink")]
        public string SelfLink { get; set; }

        /// <summary>
        /// Gets or sets UID is the unique in time and space value for this
        /// object. It is typically generated by the server on successful
        /// creation of a resource and is not allowed to change on PUT
        /// operations.
        ///
        /// Populated by the system. Read-only. More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#uids
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Status is a return value for calls that don't return other objects.
    /// </summary>
    public partial class V1Status
    {
        /// <summary>
        /// Gets or sets aPIVersion defines the versioned schema of this
        /// representation of an object. Servers should convert recognized
        /// schemas to the latest internal value, and may reject unrecognized
        /// values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or sets suggested HTTP return code for this status, 0 if not
        /// set.
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public int? Code { get; set; }

        /// <summary>
        /// Gets or sets extended data associated with the reason.  Each reason
        /// may define its own extended details. This field is optional and the
        /// data returned is not guaranteed to conform to any schema except
        /// that defined by the reason type.
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public V1StatusDetails Details { get; set; }

        /// <summary>
        /// Gets or sets kind is a string value representing the REST resource
        /// this object represents. Servers may infer this from the endpoint
        /// the client submits requests to. Cannot be updated. In CamelCase.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets a human-readable description of the status of this
        /// operation.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets standard list metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public V1ListMeta Metadata { get; set; }

        /// <summary>
        /// Gets or sets a machine-readable description of why this operation
        /// is in the "Failure" status. If this value is empty there is no
        /// information available. A Reason clarifies an HTTP status code but
        /// does not override it.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or sets status of the operation. One of: "Success" or
        /// "Failure". More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

    }
}

namespace k8s.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// StatusDetails is a set of additional properties that MAY be set by the
    /// server to provide additional information about a response. The Reason
    /// field of a Status object defines what attributes will be set. Clients
    /// must ignore fields that do not match the defined type of each
    /// attribute, and should assume that any attribute may be empty, invalid,
    /// or under defined.
    /// </summary>
    public partial class V1StatusDetails
    {
        /// <summary>
        /// Initializes a new instance of the V1StatusDetails class.
        /// </summary>
        public V1StatusDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1StatusDetails class.
        /// </summary>
        /// <param name="causes">The Causes array includes more details
        /// associated with the StatusReason failure. Not all StatusReasons may
        /// provide detailed causes.</param>
        /// <param name="group">The group attribute of the resource associated
        /// with the status StatusReason.</param>
        /// <param name="kind">The kind attribute of the resource associated
        /// with the status StatusReason. On some operations may differ from
        /// the requested resource Kind. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</param>
        /// <param name="name">The name attribute of the resource associated
        /// with the status StatusReason (when there is a single name which can
        /// be described).</param>
        /// <param name="retryAfterSeconds">If specified, the time in seconds
        /// before the operation should be retried. Some errors may indicate
        /// the client must take an alternate action - for those errors this
        /// field may indicate how long to wait before taking the alternate
        /// action.</param>
        /// <param name="uid">UID of the resource. (when there is a single
        /// resource which can be described). More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#uids</param>
        public V1StatusDetails(IList<V1StatusCause> causes = default(IList<V1StatusCause>), string group = default(string), string kind = default(string), string name = default(string), int? retryAfterSeconds = default(int?), string uid = default(string))
        {
            Causes = causes;
            Group = group;
            Kind = kind;
            Name = name;
            RetryAfterSeconds = retryAfterSeconds;
            Uid = uid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Causes array includes more details associated with
        /// the StatusReason failure. Not all StatusReasons may provide
        /// detailed causes.
        /// </summary>
        [JsonProperty(PropertyName = "causes")]
        public IList<V1StatusCause> Causes { get; set; }

        /// <summary>
        /// Gets or sets the group attribute of the resource associated with
        /// the status StatusReason.
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public string Group { get; set; }

        /// <summary>
        /// Gets or sets the kind attribute of the resource associated with the
        /// status StatusReason. On some operations may differ from the
        /// requested resource Kind. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the name attribute of the resource associated with the
        /// status StatusReason (when there is a single name which can be
        /// described).
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets if specified, the time in seconds before the operation
        /// should be retried. Some errors may indicate the client must take an
        /// alternate action - for those errors this field may indicate how
        /// long to wait before taking the alternate action.
        /// </summary>
        [JsonProperty(PropertyName = "retryAfterSeconds")]
        public int? RetryAfterSeconds { get; set; }

        /// <summary>
        /// Gets or sets UID of the resource. (when there is a single resource
        /// which can be described). More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#uids
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

    }
}

namespace k8s.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// StatusCause provides more information about an api.Status failure,
    /// including cases when multiple errors are encountered.
    /// </summary>
    public partial class V1StatusCause
    {
        /// <summary>
        /// Initializes a new instance of the V1StatusCause class.
        /// </summary>
        public V1StatusCause()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1StatusCause class.
        /// </summary>
        /// <param name="field">The field of the resource that has caused this
        /// error, as named by its JSON serialization. May include dot and
        /// postfix notation for nested attributes. Arrays are zero-indexed.
        /// Fields may appear more than once in an array of causes due to
        /// fields having multiple errors. Optional.
        ///
        /// Examples:
        /// "name" - the field "name" on the current resource
        /// "items[0].name" - the field "name" on the first array entry in
        /// "items"</param>
        /// <param name="message">A human-readable description of the cause of
        /// the error.  This field may be presented as-is to a reader.</param>
        /// <param name="reason">A machine-readable description of the cause of
        /// the error. If this value is empty there is no information
        /// available.</param>
        public V1StatusCause(string field = default(string), string message = default(string), string reason = default(string))
        {
            Field = field;
            Message = message;
            Reason = reason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the field of the resource that has caused this error,
        /// as named by its JSON serialization. May include dot and postfix
        /// notation for nested attributes. Arrays are zero-indexed.  Fields
        /// may appear more than once in an array of causes due to fields
        /// having multiple errors. Optional.
        ///
        /// Examples:
        /// "name" - the field "name" on the current resource
        /// "items[0].name" - the field "name" on the first array entry in
        /// "items"
        /// </summary>
        [JsonProperty(PropertyName = "field")]
        public string Field { get; set; }

        /// <summary>
        /// Gets or sets a human-readable description of the cause of the
        /// error.  This field may be presented as-is to a reader.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets a machine-readable description of the cause of the
        /// error. If this value is empty there is no information available.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

    }
}


